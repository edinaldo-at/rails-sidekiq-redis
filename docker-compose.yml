version: '3.8'

services:
  proxy:
    build:
      context: .
      dockerfile: ./proxy/Dockerfile
    container_name: proxy
    restart: always
    command: ["/bin/bash", "/var/www/nginx_start.sh"]
    command: [ "nginx", "-g", "daemon off;" ]
    ports:
      - "80:80"
    networks:
    - rails-sidekiq-redis

  app:
    build: .
    container_name: rails_app
    restart: always
    depends_on:
      - db
      - proxy
    command: ["/bin/bash", "./scripts/rails_server.sh"]
    volumes:
      - ./src:/src
    env_file:
      - '.env'
    ports:
      - "3000:3000"
    stdin_open: true
    tty: true
    networks:
      - rails-sidekiq-redis
  db:
    image: postgres
    container_name: postgres_db
    restart: always
    env_file:
      - '.env'
    command: "
      postgres
        -c max_connections=200
        -c logging_collector=on
        -c log_min_messages=LOG
        -c log_directory=/var/log/postgresql"
    ports:
      - 5432:5432
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - rails-sidekiq-redis
  
  redis:
    image: redis:6.2-alpine
    container_name: redis_db
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning
    volumes: 
      - ./data/redis:/data
    env_file:
      - '.env'
    networks:
      - rails-sidekiq-redis

  sidekiq:
    build: .
    container_name: sidekiq
    restart: always
    depends_on:
      - proxy
      - app
      - db
      - redis
    command: ["/bin/bash", "./scripts/sidekiq_server.sh"]
    volumes:
      - ./src:/src
    env_file:
      - '.env'
    networks:
      - rails-sidekiq-redis
 
networks:
  rails-sidekiq-redis:

volumes:
  api:
  data:
  logs: